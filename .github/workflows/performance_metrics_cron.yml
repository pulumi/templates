name: Run Performance Metrics Cron Job
"on":
  workflow_dispatch: {}
  schedule:
    - cron: 0 */6 * * *

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PULUMI_TEST_OWNER: moolumi
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_REGION: us-west-2
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
  SKIPPED_BENCHMARKS: "alicloud,digitalocean,kubernetes,openstack,equinix-metal,civo,aiven,auth0,github,yaml,oci,java-jbang,java-gradle,azuredevops,static-website,visualbasic"
  PULUMI_API: https://api.pulumi-staging.io
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_LOCATION: westus

jobs:
  performance_metrics_cron:
    name: performance_metrics_cron
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        go-version: [1.17.x]
        node-version: [14.x]
        python-version: [3.7]
        dotnet: [6.0.x]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Java 11 (temurin)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Install DotNet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{matrix.dotnet}}
      - if: contains(matrix.platform, 'windows')
        name: DotNet clean on windows
        run: |
          dotnet nuget locals all --clear
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.node-version}}
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.python-version}}
      - name: Install Go ${{ matrix.go-version }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{matrix.go-version}}
      - name: Install Python Deps
        run: |-
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Install gotestfmt
        uses: jaxxstorm/action-install-gh-release@v1.7.1
        with:
          repo: haveyoudebuggedit/gotestfmt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 14400 # 4 hours
          role-session-name: templates@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - uses: actions/checkout@v2
      # TODO find a way to preferably use latest dev builds here instead:
      # https://github.com/pulumi/pulumi/issues/10728
      - name: Install Latest Pulumi CLI
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: latest
      - run: echo "Currently Pulumi $(pulumi version) is installed"
      - name: Install Testing Dependencies
        run: make ensure
      - name: Create a Folder for Collecting Traces
        run: |-
          mkdir "$PWD/traces"
      - name: Add Test Trace Details
        run: |
          echo "PULUMI_VERSION=$(pulumi version)"                    >> $GITHUB_ENV
          echo "PULUMI_TRACING_TAG_PULUMI_VERSION=$(pulumi version)" >> $GITHUB_ENV
          echo "PULUMI_TRACING_DIR=$PWD/traces"                      >> $GITHUB_ENV
      - name: Running Performance Matrix
        shell: bash
        # Even if some Go tests fail, others may have succeded and
        # produced perf data; continue to try to upload it.
        continue-on-error: true
        run: |
          set -euo pipefail
          cd tests/perf && go test -v -json -count=1 -timeout 6h -parallel 1 . 2>&1 | tee /tmp/gotest.log | gotestfmt
        env:
          PULUMI_PYTHON_CMD: python
      - name: Upload traces GHA artifact
        uses: actions/upload-artifact@v3
        with:
          name: traces
          path: traces
          retention-days: 14
      - name: Upload Traces to s3://cli-performance-metrics
        run: |-
            F="$PWD/traces/metrics.parquet.snappy"
            RAND=$(python -c 'import uuid; print(uuid.uuid4())')
            aws s3 cp "$F" "s3://cli-performance-metrics/cli_performance_metrics/date_partition/date=$(date -u +'%Y-%m-%d')/cli_performance_metrics_$RAND.parquet.snappy"

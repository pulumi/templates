name: ${PROJECT}
description: ${DESCRIPTION}
runtime: yaml

template:
  description: A static website on AWS
  config:
    azure-native:location:
      description: The Azure region to deploy into
      default: WestUS
    path:
      type: String
      default: ./site
    indexDocument:
      type: String
      default: index.html
    errorDocument:
      type: String
      default: error.html

configuration:
  path:
    type: String
    default: ./site
  indexDocument:
    type: String
    default: index.html
  errorDocument:
    type: String
    default: error.html

variables:
  originHostname:
    Fn::Select:
      - 2
      - Fn::Split:
        - /
        - ${account.primaryEndpoints.web}

resources:

  resource-group:
    type: azure-native:resources:ResourceGroup

  account:
    type: azure-native:storage:StorageAccount
    properties:
      resourceGroupName: ${resource-group.name}
      kind: StorageV2
      sku:
        name: Standard_LRS

  website:
    type: azure-native:storage:StorageAccountStaticWebsite
    properties:
      resourceGroupName: ${resource-group.name}
      accountName: ${account.name}
      indexDocument: ${indexDocument}
      error404Document: ${errorDocument}

  synced-folder:
    type: synced-folder:index:AzureBlobFolder
    properties:
      path: ${path}
      resourceGroupName: ${resource-group.name}
      storageAccountName: ${account.name}
      containerName: ${website.containerName}

  profile:
    type: azure-native:cdn:Profile
    properties:
      resourceGroupName: ${resource-group.name}
      sku:
        name: Standard_Microsoft

  endpoint:
    type: azure-native:cdn:Endpoint
    properties:
      resourceGroupName: ${resource-group.name}
      profileName: ${profile.name}
      isHttpAllowed: false
      isHttpsAllowed: true
      isCompressionEnabled: true
      contentTypesToCompress:
        - text/html
        - text/css
        - application/javascript
        - application/json
        - image/svg+xml
        - font/woff
        - font/woff2
      originHostHeader: ${originHostname}
      origins:
        - name: ${account.name}
          hostName: ${originHostname}

outputs:
  originURL: ${account.primaryEndpoints.web}
  originHostname: ${originHostname}
  cdnURL: https://${endpoint.hostName}
  cdnHostname: ${endpoint.hostName}
